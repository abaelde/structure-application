#!/usr/bin/env python3
"""
Test simple de Snowpark sans proc√©dures stock√©es.

Ce script teste les fonctionnalit√©s de base de Snowpark
sans cr√©er de proc√©dures stock√©es permanentes.
"""

import sys
import json
from pathlib import Path

# Ajouter le r√©pertoire racine au path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from snowflake_utils import get_snowpark_session, close_snowpark_session
from snowflake.snowpark.functions import col


def test_basic_snowpark():
    """Test des fonctionnalit√©s de base de Snowpark."""
    print("üß™ Test simple de Snowpark")
    print("=" * 30)
    
    try:
        # Obtenir une session
        session = get_snowpark_session()
        print("‚úÖ Session Snowpark obtenue")
        
        # Test 1: Requ√™te simple
        print("\n1. Test de requ√™te simple...")
        result = session.sql("SELECT CURRENT_VERSION() as version, CURRENT_DATABASE() as database, CURRENT_SCHEMA() as schema").collect()
        print(f"   Version: {result[0]['VERSION']}")
        print(f"   Database: {result[0]['DATABASE']}")
        print(f"   Schema: {result[0]['SCHEMA']}")
        
        # Test 2: V√©rifier les tables existantes
        print("\n2. Test de liste des tables...")
        tables_result = session.sql("SHOW TABLES").collect()
        print(f"   {len(tables_result)} tables trouv√©es")
        
        # Afficher les premi√®res tables
        for i, table in enumerate(tables_result[:5]):
            print(f"   - {table['name']}")
        
        # Test 3: V√©rifier si les tables de programmes existent
        print("\n3. Test des tables de programmes...")
        program_tables = ["REINSURANCE_PROGRAM", "RP_STRUCTURES", "RP_CONDITIONS", "RP_GLOBAL_EXCLUSION"]
        
        for table_name in program_tables:
            try:
                count_result = session.sql(f"SELECT COUNT(*) as count FROM {table_name}").collect()
                count = count_result[0]['COUNT']
                print(f"   ‚úÖ {table_name}: {count} enregistrements")
            except Exception as e:
                print(f"   ‚ùå {table_name}: Erreur - {e}")
        
        # Test 4: Lire un programme directement avec Snowpark
        print("\n4. Test de lecture directe avec Snowpark...")
        try:
            # Essayer de lire le premier programme
            program_df = session.table("REINSURANCE_PROGRAM").limit(1).to_pandas()
            
            if not program_df.empty:
                program = program_df.iloc[0]
                program_id = program['REINSURANCE_PROGRAM_ID']
                title = program['TITLE']
                print(f"   ‚úÖ Programme trouv√©: {title} (ID: {program_id})")
                
                # Lire les structures pour ce programme
                structures_df = session.table("RP_STRUCTURES").filter(
                    col("REINSURANCE_PROGRAM_ID") == int(program_id)
                ).to_pandas()
                
                print(f"   ‚úÖ Structures: {len(structures_df)} trouv√©es")
                
                # Lire les conditions pour ce programme
                conditions_df = session.table("RP_CONDITIONS").filter(
                    col("REINSURANCE_PROGRAM_ID") == int(program_id)
                ).to_pandas()
                
                print(f"   ‚úÖ Conditions: {len(conditions_df)} trouv√©es")
                
            else:
                print("   ‚ö†Ô∏è  Aucun programme trouv√©")
                
        except Exception as e:
            print(f"   ‚ùå Erreur lors de la lecture: {e}")
        
        print("\n‚úÖ Tests Snowpark de base termin√©s avec succ√®s")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors des tests: {e}")
        return False
    
    finally:
        close_snowpark_session()


def main():
    """Fonction principale."""
    success = test_basic_snowpark()
    return 0 if success else 1


if __name__ == "__main__":
    sys.exit(main())
