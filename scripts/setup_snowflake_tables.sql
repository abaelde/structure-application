-- Script de création des tables Snowflake pour l'intégration
-- Usage: Exécuter ce script dans votre instance Snowflake

-- Remplacez MYDB et MYSCHEMA par vos valeurs
-- Ou utilisez les variables d'environnement SNOWFLAKE_DATABASE et SNOWFLAKE_SCHEMA

-- Création du schéma (si nécessaire)
CREATE SCHEMA IF NOT EXISTS MYDB.MYSCHEMA;

-- ========================================
-- TABLES POUR LES PROGRAMMES
-- ========================================

-- Table principale des programmes
CREATE TABLE IF NOT EXISTS MYDB.MYSCHEMA.PROGRAMS (
  PROGRAM_ID             STRING          PRIMARY KEY,
  REPROG_TITLE           STRING          NOT NULL,
  REPROG_UW_DEPARTMENT_LOB_CD STRING     NOT NULL,
  CREATED_AT             TIMESTAMP_NTZ   DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT             TIMESTAMP_NTZ,
  PAYLOAD                STRING          -- JSON (texte) pour champs optionnels
);

-- Table des structures de réassurance
CREATE TABLE IF NOT EXISTS MYDB.MYSCHEMA.STRUCTURES (
  PROGRAM_ID                 STRING       NOT NULL,
  INSPER_ID_PRE              NUMBER       NOT NULL,     -- ident interne "par programme"
  INSPER_CONTRACT_ORDER      NUMBER,
  TYPE_OF_PARTICIPATION_CD   STRING,
  INSPER_PREDECESSOR_TITLE   STRING,
  INSPER_CLAIM_BASIS_CD      STRING,
  INSPER_EFFECTIVE_DATE      TIMESTAMP_NTZ,
  INSPER_EXPIRY_DATE         TIMESTAMP_NTZ,
  PAYLOAD                    STRING,                   -- JSON (texte) complet de la ligne
  PRIMARY KEY (PROGRAM_ID, INSPER_ID_PRE)
);

-- Table des conditions de réassurance
CREATE TABLE IF NOT EXISTS MYDB.MYSCHEMA.CONDITIONS (
  PROGRAM_ID               STRING     NOT NULL,
  INSPER_ID_PRE            NUMBER     NOT NULL,     -- FK vers STRUCTURES
  BUSCL_ID_PRE             NUMBER     NOT NULL,
  SIGNED_SHARE_PCT         FLOAT,
  INCLUDES_HULL            BOOLEAN,
  INCLUDES_LIABILITY       BOOLEAN,
  PAYLOAD                  STRING,                 -- JSON (texte) complet de la ligne
  PRIMARY KEY (PROGRAM_ID, BUSCL_ID_PRE)
);

-- Table des exclusions
CREATE TABLE IF NOT EXISTS MYDB.MYSCHEMA.EXCLUSIONS (
  PROGRAM_ID             STRING     NOT NULL,
  EXCL_REASON            STRING,
  EXCL_EFFECTIVE_DATE    TIMESTAMP_NTZ,
  EXCL_EXPIRY_DATE       TIMESTAMP_NTZ,
  PAYLOAD                STRING
);

-- ========================================
-- TABLES POUR LES RUNS
-- ========================================

-- Table des exécutions de calculs
CREATE TABLE IF NOT EXISTS MYDB.MYSCHEMA.RUNS (
  RUN_ID            STRING PRIMARY KEY,
  PROGRAM_ID        STRING,
  PROGRAM_NAME      STRING,
  UW_DEPT           STRING,
  CALCULATION_DATE  STRING,
  SOURCE_PROGRAM    STRING,
  SOURCE_BORDEREAU  STRING,
  PROGRAM_FINGERPRINT STRING,
  STARTED_AT        STRING,
  ENDED_AT          STRING,
  ROW_COUNT         NUMBER,
  NOTES             STRING
);

-- Table des politiques traitées dans un run
CREATE TABLE IF NOT EXISTS MYDB.MYSCHEMA.RUN_POLICIES (
  POLICY_RUN_ID         STRING PRIMARY KEY,
  RUN_ID                STRING,
  POLICY_ID             STRING,
  INSURED_NAME          STRING,
  INCEPTION_DT          STRING,
  EXPIRE_DT             STRING,
  EXCLUSION_STATUS      STRING,
  EXCLUSION_REASON      STRING,
  EXPOSURE              FLOAT,
  EFFECTIVE_EXPOSURE    FLOAT,
  CESSION_TO_LAYER_100PCT FLOAT,
  CESSION_TO_REINSURER  FLOAT,
  RETAINED_BY_CEDANT    FLOAT,
  RAW_RESULT_JSON       STRING
);

-- Table des structures appliquées par politique
CREATE TABLE IF NOT EXISTS MYDB.MYSCHEMA.RUN_POLICY_STRUCTURES (
  STRUCTURE_ROW_ID        STRING PRIMARY KEY,
  POLICY_RUN_ID           STRING,
  STRUCTURE_NAME          STRING,
  TYPE_OF_PARTICIPATION   STRING,
  PREDECESSOR_TITLE       STRING,
  CLAIM_BASIS             STRING,
  PERIOD_START            STRING,
  PERIOD_END              STRING,
  APPLIED                 BOOLEAN,
  REASON                  STRING,
  SCOPE                   STRING,
  INPUT_EXPOSURE          FLOAT,
  CEDED_TO_LAYER_100PCT   FLOAT,
  CEDED_TO_REINSURER      FLOAT,
  RETAINED_AFTER          FLOAT,
  TERMS_JSON              STRING,
  MATCHED_CONDITION_JSON  STRING,
  RESCALING_JSON          STRING,
  MATCHING_DETAILS_JSON   STRING,
  METRICS_JSON            STRING
);

-- ========================================
-- INDEX ET CONTRAINTES
-- ========================================

-- Index pour améliorer les performances
CREATE INDEX IF NOT EXISTS IDX_PROGRAMS_TITLE ON MYDB.MYSCHEMA.PROGRAMS (REPROG_TITLE);
CREATE INDEX IF NOT EXISTS IDX_STRUCTURES_PROGRAM ON MYDB.MYSCHEMA.STRUCTURES (PROGRAM_ID);
CREATE INDEX IF NOT EXISTS IDX_CONDITIONS_PROGRAM ON MYDB.MYSCHEMA.CONDITIONS (PROGRAM_ID);
CREATE INDEX IF NOT EXISTS IDX_EXCLUSIONS_PROGRAM ON MYDB.MYSCHEMA.EXCLUSIONS (PROGRAM_ID);
CREATE INDEX IF NOT EXISTS IDX_RUNS_PROGRAM ON MYDB.MYSCHEMA.RUNS (PROGRAM_ID);
CREATE INDEX IF NOT EXISTS IDX_POLICIES_RUN ON MYDB.MYSCHEMA.RUN_POLICIES (RUN_ID);
CREATE INDEX IF NOT EXISTS IDX_STRUCTURES_POLICY ON MYDB.MYSCHEMA.RUN_POLICY_STRUCTURES (POLICY_RUN_ID);

-- ========================================
-- VUES UTILES (OPTIONNEL)
-- ========================================

-- Vue pour extraire des champs du payload JSON des programmes
CREATE OR REPLACE VIEW MYDB.MYSCHEMA.V_PROGRAMS_DETAILED AS
SELECT 
  PROGRAM_ID,
  REPROG_TITLE,
  REPROG_UW_DEPARTMENT_LOB_CD,
  CREATED_AT,
  UPDATED_AT,
  -- Extraction de champs du payload JSON (ajustez selon vos besoins)
  TRY_PARSE_JSON(PAYLOAD):REPROG_ID_PRE::NUMBER as REPROG_ID_PRE,
  TRY_PARSE_JSON(PAYLOAD):REPROG_DESCRIPTION::STRING as REPROG_DESCRIPTION
FROM MYDB.MYSCHEMA.PROGRAMS;

-- Vue pour les statistiques des runs
CREATE OR REPLACE VIEW MYDB.MYSCHEMA.V_RUN_STATISTICS AS
SELECT 
  r.RUN_ID,
  r.PROGRAM_NAME,
  r.UW_DEPT,
  r.CALCULATION_DATE,
  r.ROW_COUNT,
  COUNT(p.POLICY_RUN_ID) as POLICY_COUNT,
  COUNT(s.STRUCTURE_ROW_ID) as STRUCTURE_COUNT,
  SUM(p.EXPOSURE) as TOTAL_EXPOSURE,
  SUM(p.CESSION_TO_REINSURER) as TOTAL_CESSION
FROM MYDB.MYSCHEMA.RUNS r
LEFT JOIN MYDB.MYSCHEMA.RUN_POLICIES p ON r.RUN_ID = p.RUN_ID
LEFT JOIN MYDB.MYSCHEMA.RUN_POLICY_STRUCTURES s ON p.POLICY_RUN_ID = s.POLICY_RUN_ID
GROUP BY r.RUN_ID, r.PROGRAM_NAME, r.UW_DEPT, r.CALCULATION_DATE, r.ROW_COUNT;

-- ========================================
-- COMMENTAIRES
-- ========================================

COMMENT ON TABLE MYDB.MYSCHEMA.PROGRAMS IS 'Table principale des programmes de réassurance';
COMMENT ON TABLE MYDB.MYSCHEMA.STRUCTURES IS 'Structures de réassurance par programme';
COMMENT ON TABLE MYDB.MYSCHEMA.CONDITIONS IS 'Conditions de réassurance par structure';
COMMENT ON TABLE MYDB.MYSCHEMA.EXCLUSIONS IS 'Exclusions par programme';
COMMENT ON TABLE MYDB.MYSCHEMA.RUNS IS 'Exécutions de calculs de réassurance';
COMMENT ON TABLE MYDB.MYSCHEMA.RUN_POLICIES IS 'Politiques traitées dans chaque run';
COMMENT ON TABLE MYDB.MYSCHEMA.RUN_POLICY_STRUCTURES IS 'Structures appliquées par politique dans chaque run';

-- ========================================
-- SCRIPT DE NETTOYAGE (À UTILISER AVEC PRÉCAUTION)
-- ========================================

-- Décommentez les lignes ci-dessous pour supprimer toutes les tables
-- ATTENTION: Cette opération supprime toutes les données !

-- DROP VIEW IF EXISTS MYDB.MYSCHEMA.V_RUN_STATISTICS;
-- DROP VIEW IF EXISTS MYDB.MYSCHEMA.V_PROGRAMS_DETAILED;
-- DROP TABLE IF EXISTS MYDB.MYSCHEMA.RUN_POLICY_STRUCTURES;
-- DROP TABLE IF EXISTS MYDB.MYSCHEMA.RUN_POLICIES;
-- DROP TABLE IF EXISTS MYDB.MYSCHEMA.RUNS;
-- DROP TABLE IF EXISTS MYDB.MYSCHEMA.EXCLUSIONS;
-- DROP TABLE IF EXISTS MYDB.MYSCHEMA.CONDITIONS;
-- DROP TABLE IF EXISTS MYDB.MYSCHEMA.STRUCTURES;
-- DROP TABLE IF EXISTS MYDB.MYSCHEMA.PROGRAMS;
-- DROP SCHEMA IF EXISTS MYDB.MYSCHEMA;
