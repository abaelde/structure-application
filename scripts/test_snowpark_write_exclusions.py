#!/usr/bin/env python3
"""
Test d'√©criture Snowpark - Programme avec exclusions

Ce script teste l'√©criture d'un programme Quota Share avec exclusions via Snowpark.
Il s'inspire du script create_quota_share_with_exclusion.py pour cr√©er un programme
avec des exclusions et v√©rifier que l'√©criture Snowpark les g√®re correctement.
"""

import sys
import os
from datetime import datetime

# Ajouter le r√©pertoire racine au path
sys.path.append(os.path.join(os.path.dirname(__file__), ".."))

from src.builders import build_quota_share, build_program
from src.domain.exclusion import ExclusionRule
from snowflake_utils import save_program_snowpark
from snowflake_utils.snowpark_config import get_snowpark_session, close_snowpark_session
from src.managers.program_snowpark_manager import SnowparkProgramManager


def create_quota_share_with_exclusions_program():
    """Cr√©e le programme Quota Share avec exclusions en utilisant exactement le m√™me code que create_quota_share_with_exclusion.py."""
    from datetime import datetime
    
    # Cr√©er un quota share avec condition normale uniquement
    qs = build_quota_share(
        name="QS Casualty 25%",
        cession_pct=0.25,
        signed_share=1.0,
        claim_basis="risk_attaching",
        inception_date="2024-01-01",
        expiry_date="2024-12-31",
    )
    
    # Cr√©er les exclusions - Test de compaction multi-valeurs
    exclusions = [
        ExclusionRule(
            values_by_dimension={"COUNTRY": ["Iran", "Russia"]},
            name="Sanctions Countries",
        ),
    ]
    
    # Cr√©er le programme avec les exclusions et timestamp unique
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    program_name = f"Quota_Share_with_Exclusions_SNOWPARK_TEST_{timestamp}"
    
    program = build_program(
        name=program_name,
        structures=[qs],
        underwriting_department="casualty",
        exclusions=exclusions,
    )
    
    return program


def test_write_quota_share_with_exclusions_snowpark():
    """Test d'√©criture du programme Quota Share avec exclusions via Snowpark."""
    print("üöÄ Test d'√©criture Snowpark - Programme Quota Share avec exclusions")
    print("=" * 80)
    
    try:
        # 1. Cr√©ation du programme
        print("1. Cr√©ation du programme Quota Share avec exclusions...")
        program = create_quota_share_with_exclusions_program()
        program_name = program.name
        
        print(f"   ‚úÖ Programme cr√©√©: {program_name}")
        print(f"   ‚úÖ Structures: {len(program.structures)}")
        print(f"   ‚úÖ Exclusions: {len(program.exclusions)}")
        
        # 2. Sauvegarde via Snowpark
        print("\n2. Sauvegarde via Snowpark...")
        success = save_program_snowpark(program, program_name)
        print(f"   ‚úÖ Programme sauvegard√©: {success}")
        
        # 3. V√©rification - Lecture du programme sauvegard√©
        print("\n3. V√©rification - Lecture du programme sauvegard√©...")
        session = get_snowpark_session()
        
        try:
            manager = SnowparkProgramManager(session)
            
            # Trouver l'ID du programme cr√©√© par son nom
            result = session.sql(f"SELECT REINSURANCE_PROGRAM_ID FROM REINSURANCE_PROGRAM WHERE TITLE = '{program_name}'").collect()
            if not result:
                print(f"   ‚ùå Programme '{program_name}' non trouv√©")
                return False
            
            program_id = int(result[0][0])
            
            print(f"   üîç Lecture du programme avec ID: {program_id}")
            loaded_program = manager.load(program_id)
            
            print(f"   ‚úÖ Programme relu: {loaded_program.name}")
            print(f"   ‚úÖ Structures: {len(loaded_program.structures)}")
            print(f"   ‚úÖ Exclusions: {len(loaded_program.exclusions)}")
            
            # 4. V√©rification de la coh√©rence
            print("\n4. V√©rification de la coh√©rence...")
            
            # V√©rifier le nom
            if program.name == loaded_program.name:
                print("   ‚úÖ Nom coh√©rent")
            else:
                print(f"   ‚ùå Nom diff√©rent: original='{program.name}', charg√©='{loaded_program.name}'")
                return False
            
            # V√©rifier le d√©partement
            if program.underwriting_department == loaded_program.underwriting_department:
                print("   ‚úÖ D√©partement coh√©rent")
            else:
                print(f"   ‚ùå D√©partement diff√©rent: original='{program.underwriting_department}', charg√©='{loaded_program.underwriting_department}'")
                return False
            
            # V√©rifier le nombre de structures
            if len(program.structures) == len(loaded_program.structures):
                print("   ‚úÖ Nombre de structures coh√©rent")
            else:
                print(f"   ‚ùå Nombre de structures diff√©rent: original={len(program.structures)}, charg√©={len(loaded_program.structures)}")
                return False
            
            # V√©rifier le nombre d'exclusions
            if len(program.exclusions) == len(loaded_program.exclusions):
                print("   ‚úÖ Nombre d'exclusions coh√©rent")
            else:
                print(f"   ‚ùå Nombre d'exclusions diff√©rent: original={len(program.exclusions)}, charg√©={len(loaded_program.exclusions)}")
                return False
            
            # V√©rifier les d√©tails des exclusions
            if len(program.exclusions) > 0:
                original_exclusion = program.exclusions[0]
                loaded_exclusion = loaded_program.exclusions[0]
                
                # Note: Le nom de l'exclusion n'est pas stock√© dans Snowflake, donc il sera toujours None
                print(f"   ‚ÑπÔ∏è  Nom d'exclusion original: '{original_exclusion.name}' (non stock√© en base)")
                print(f"   ‚ÑπÔ∏è  Nom d'exclusion charg√©: '{loaded_exclusion.name}' (attendu: None)")
                
                # V√©rifier les valeurs d'exclusion (ce qui est vraiment important)
                original_values = original_exclusion.values_by_dimension.get("COUNTRY", [])
                loaded_values = loaded_exclusion.values_by_dimension.get("COUNTRY", [])
                
                if set(original_values) == set(loaded_values):
                    print("   ‚úÖ Valeurs d'exclusion coh√©rentes")
                    print(f"      Original: {original_values}")
                    print(f"      Charg√©: {loaded_values}")
                else:
                    print(f"   ‚ùå Valeurs d'exclusion diff√©rentes: original={original_values}, charg√©={loaded_values}")
                    return False
            
            print("\nüéâ Test d'√©criture Snowpark r√©ussi !")
            print("   Le programme Quota Share avec exclusions a √©t√© √©crit et relu avec succ√®s")
            print("   Toutes les v√©rifications de coh√©rence sont pass√©es")
            
            return True
            
        finally:
            close_snowpark_session()
            
    except Exception as e:
        print(f"\n‚ùå Erreur lors du test: {e}")
        import traceback
        traceback.print_exc()
        return False


def main():
    """Fonction principale de test."""
    print("üß™ Test d'√©criture Snowpark - Programme Quota Share avec exclusions")
    print("=" * 80)
    
    success = test_write_quota_share_with_exclusions_snowpark()
    
    if success:
        print("\nüéâ Test r√©ussi !")
        print("   L'√©criture Snowpark avec exclusions fonctionne correctement")
        print("   Le programme Quota Share avec exclusions a √©t√© sauvegard√© et relu avec succ√®s")
    else:
        print("\n‚ùå Test √©chou√© !")
        print("   V√©rifiez les erreurs ci-dessus")
    
    return success


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
