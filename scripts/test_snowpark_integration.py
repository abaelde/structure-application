#!/usr/bin/env python3
"""
Test d'int√©gration Snowpark avec l'architecture existante.

Ce script teste le chargement d'un programme via Snowpark
et sa conversion en objet Program en m√©moire via le ProgramSerializer.
"""

import sys
from pathlib import Path

# Ajouter le r√©pertoire racine au path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from snowflake_utils import get_snowpark_session, close_snowpark_session
from src.managers.program_snowpark_manager import SnowparkProgramManager


def test_snowpark_program_loading():
    """Test du chargement d'un programme via Snowpark."""
    print("üß™ Test d'int√©gration Snowpark avec l'architecture existante")
    print("=" * 60)
    
    try:
        # 1. Obtenir une session Snowpark
        print("1. Connexion Snowpark...")
        session = get_snowpark_session()
        print("   ‚úÖ Session Snowpark obtenue")
        
        # 2. Cr√©er le manager Snowpark
        print("\n2. Cr√©ation du ProgramManager Snowpark...")
        manager = SnowparkProgramManager(session)
        print("   ‚úÖ ProgramManager Snowpark cr√©√©")
        
        # 3. Charger un programme par ID
        print("\n3. Chargement du programme...")
        program_id = 1
        
        program = manager.load(program_id)
        print(f"   ‚úÖ Programme charg√©: {program.name}")
        print(f"   ‚úÖ D√©partement: {program.underwriting_department}")
        print(f"   ‚úÖ Nombre de structures: {len(program.structures)}")
        print(f"   ‚úÖ Nombre d'exclusions: {len(program.exclusions)}")
        
        # 4. Utiliser la m√©thode describe() du programme
        print("\n4. Description du programme:")
        print("-" * 40)
        program.describe()
        
        # 5. Afficher quelques d√©tails des structures
        print("\n5. D√©tails des structures:")
        print("-" * 40)
        for i, structure in enumerate(program.structures[:3]):  # Afficher les 3 premi√®res
            print(f"   Structure {i+1}: {structure.structure_name}")
            print(f"   - Type: {structure.type_of_participation}")
            print(f"   - Claim Basis: {structure.claim_basis}")
            print(f"   - Limit: {structure.limit}")
            print(f"   - Attachment: {structure.attachment}")
            print(f"   - Cession: {structure.cession_pct}%")
            print(f"   - Conditions: {len(structure.conditions)}")
            print()
        
        # 6. Tester l'acc√®s aux donn√©es du programme
        print("6. Test d'acc√®s aux donn√©es:")
        print("-" * 40)
        print(f"   ‚úÖ Nom du programme: {program.name}")
        print(f"   ‚úÖ D√©partement UW: {program.underwriting_department}")
        print(f"   ‚úÖ Colonnes de dimensions: {program.dimension_columns}")
        print(f"   ‚úÖ Programme charg√© avec ID: {manager.get_loaded_program_id()}")
        
        print("\n‚úÖ Test d'int√©gration r√©ussi !")
        print("   Le programme a √©t√© charg√© via Snowpark et converti en objet Program")
        print("   L'objet Program est maintenant disponible en m√©moire avec toutes ses m√©thodes")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors du test: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    finally:
        close_snowpark_session()


def test_program_serialization():
    """Test de la s√©rialisation du programme charg√©."""
    print("\n" + "=" * 60)
    print("üß™ Test de s√©rialisation du programme")
    print("=" * 60)
    
    try:
        session = get_snowpark_session()
        manager = SnowparkProgramManager(session)
        
        # Charger le programme
        program_id = 1
        program = manager.load(program_id)
        
        # Tester la s√©rialisation en DataFrames
        print("1. Test de s√©rialisation en DataFrames...")
        dfs = manager.serializer.program_to_dataframes(program)
        
        print(f"   ‚úÖ Program DataFrame: {len(dfs['program'])} ligne(s)")
        print(f"   ‚úÖ Structures DataFrame: {len(dfs['structures'])} ligne(s)")
        print(f"   ‚úÖ Conditions DataFrame: {len(dfs['conditions'])} ligne(s)")
        print(f"   ‚úÖ Exclusions DataFrame: {len(dfs['exclusions'])} ligne(s)")
        print(f"   ‚úÖ Field Links DataFrame: {len(dfs['field_links'])} ligne(s)")
        
        # Afficher quelques colonnes des DataFrames
        print("\n2. Aper√ßu des DataFrames:")
        print("   Program:")
        print(f"     - TITLE: {dfs['program']['TITLE'].iloc[0]}")
        print(f"     - UW_LOB_ID: {dfs['program']['UW_LOB_ID'].iloc[0]}")
        
        print("   Structures:")
        if not dfs['structures'].empty:
            print(f"     - Premi√®re structure: {dfs['structures']['RP_STRUCTURE_NAME'].iloc[0]}")
            print(f"     - Type: {dfs['structures']['TYPE_OF_PARTICIPATION'].iloc[0]}")
        
        print("\n‚úÖ Test de s√©rialisation r√©ussi !")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors du test de s√©rialisation: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    finally:
        close_snowpark_session()


def main():
    """Fonction principale de test."""
    print("üöÄ Test d'int√©gration Snowpark avec l'architecture existante")
    print("=" * 80)
    
    tests = [
        ("Chargement de programme", test_snowpark_program_loading),
        ("S√©rialisation", test_program_serialization),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            success = test_func()
            results.append((test_name, success))
        except Exception as e:
            print(f"‚ùå Erreur inattendue dans {test_name}: {e}")
            results.append((test_name, False))
    
    # R√©sum√© des tests
    print(f"\n{'='*80}")
    print("üìä R√âSUM√â DES TESTS")
    print(f"{'='*80}")
    
    passed = 0
    total = len(results)
    
    for test_name, success in results:
        status = "‚úÖ PASS√â" if success else "‚ùå √âCHOU√â"
        print(f"{test_name:.<50} {status}")
        if success:
            passed += 1
    
    print(f"\nR√©sultat: {passed}/{total} tests pass√©s")
    
    if passed == total:
        print("üéâ Tous les tests sont pass√©s ! L'int√©gration Snowpark fonctionne parfaitement.")
        print("\nüìã Prochaines √©tapes possibles:")
        print("   - Int√©grer dans run_program_analysis.py")
        print("   - Cr√©er des fonctions d'√©criture")
        print("   - Migrer progressivement du connecteur classique")
        return 0
    else:
        print("‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus.")
        return 1


def show_usage():
    """Affiche l'utilisation du script."""
    print("Usage: python scripts/test_snowpark_integration.py")
    print("\nCe script teste l'int√©gration Snowpark avec l'architecture existante.")
    print("\nPr√©requis:")
    print("- Configuration Snowflake valide")
    print("- Donn√©es de programmes dans la base")
    print("- Programme avec ID 1 doit exister")


if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] in ["-h", "--help"]:
        show_usage()
        sys.exit(0)
    
    try:
        exit_code = main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Test interrompu par l'utilisateur")
        exit_code = 1
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        exit_code = 1
    
    sys.exit(exit_code)
