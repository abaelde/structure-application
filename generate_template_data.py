#!/usr/bin/env python3
"""
Script pour g√©n√©rer un fichier CSV de template avec des donn√©es vari√©es
pour l'entra√Ænement des contreparties.
"""

import pandas as pd
import random
from datetime import datetime, timedelta
from typing import List, Dict, Any

# Configuration
NUM_RECORDS = 5000  # Nombre de lignes √† g√©n√©rer
OUTPUT_FILE = "template_results.csv"

# Listes de donn√©es r√©alistes
CEDENT_NAMES = [
    "AXA",
    "ALLIANZ",
    "MUNICH RE",
    "SWISS RE",
    "HANNOVER RE",
    "SCOR",
    "GENERALI",
    "ZURICH",
    "CHUBB",
    "BERKSHIRE HATHAWAY"
]

AIRLINE_NAMES = [
    "AIR FRANCE-KLM",
    "LUFTHANSA GROUP",
    "EMIRATES AIRLINES",
    "SINGAPORE AIRLINES",
    "AIR CANADA",
    "QATAR AIRWAYS",
    "BRITISH AIRWAYS",
    "AMERICAN AIRLINES",
    "DELTA AIR LINES",
    "UNITED AIRLINES",
    "JAPAN AIRLINES",
    "ANA (ALL NIPPON AIRWAYS)",
    "CATHAY PACIFIC",
    "THAI AIRWAYS",
    "MALAYSIA AIRLINES",
    "KOREAN AIR",
    "CHINA SOUTHERN",
    "CHINA EASTERN",
    "AIR CHINA",
    "TURKISH AIRLINES",
    "SAUDI ARABIAN AIRLINES",
    "ETIHAD AIRWAYS",
    "VIRGIN ATLANTIC",
    "EASYJET",
    "RYANAIR",
    "SOUTHWEST AIRLINES",
    "JETBLUE AIRWAYS",
    "ALASKA AIRLINES",
    "SPIRIT AIRLINES",
    "FRONTIER AIRLINES"
]

EXCLUSION_REASONS = [
    "",
    "War Risk Exclusion",
    "Nuclear Risk Exclusion",
    "Terrorism Exclusion",
    "Cyber Risk Exclusion",
    "Pandemic Exclusion"
]

def generate_policy_dates() -> tuple:
    """G√©n√®re des dates de d√©but et fin de police r√©alistes."""
    # Date de d√©but entre 2024 et 2025
    start_date = datetime(2024, 1, 1) + timedelta(days=random.randint(0, 365))
    
    # Dur√©e de police entre 1 et 2 ans
    duration_days = random.choice([365, 730])  # 1 an ou 2 ans
    end_date = start_date + timedelta(days=duration_days)
    
    return start_date.strftime("%Y-%m-%d"), end_date.strftime("%Y-%m-%d")

def generate_exposure_data() -> Dict[str, float]:
    """G√©n√®re des donn√©es d'exposition r√©alistes."""
    # Exposition de base entre 10M et 100M
    base_exposure = random.uniform(10000000, 100000000)
    
    # Pourcentage c√©d√© au layer 100% (entre 0% et 90%)
    ceded_percentage = random.uniform(0, 0.9)
    ceded_to_layer = base_exposure * ceded_percentage
    
    # Montant c√©d√© au r√©assureur (l√©g√®rement inf√©rieur au layer)
    ceded_to_reinsurer = ceded_to_layer * random.uniform(0.95, 0.99)
    
    # Montant retenu par la c√©dante
    retained = base_exposure - ceded_to_layer
    
    return {
        "exposure": round(base_exposure, 1),
        "total_ceded_by_cedent": round(ceded_to_layer, 1),
        "ceded_to_reinsurer": round(ceded_to_reinsurer, 1),
        "retained_by_cedant": round(retained, 1)
    }

def generate_exclusion_data() -> tuple:
    """G√©n√®re des donn√©es d'exclusion."""
    # 80% des polices sont incluses, 20% exclues
    if random.random() < 0.8:
        return "included", ""
    else:
        return "excluded", random.choice(EXCLUSION_REASONS[1:])  # Exclure la cha√Æne vide

def generate_record() -> Dict[str, Any]:
    """G√©n√®re un enregistrement complet."""
    exposure_data = generate_exposure_data()
    policy_start, policy_end = generate_policy_dates()
    exclusion_status, exclusion_reason = generate_exclusion_data()
    
    return {
        "insured_name": random.choice(AIRLINE_NAMES),
        "cedent_name": random.choice(CEDENT_NAMES),
        "exposure": exposure_data["exposure"],
        "total_ceded_by_cedent": exposure_data["total_ceded_by_cedent"],
        "ceded_to_reinsurer": exposure_data["ceded_to_reinsurer"],
        "retained_by_cedant": exposure_data["retained_by_cedant"],
        "policy_inception_date": policy_start,
        "policy_expiry_date": policy_end,
        "exclusion_status": exclusion_status,
        "exclusion_reason": exclusion_reason,        
    }

def main():
    """Fonction principale pour g√©n√©rer le fichier CSV."""
    print(f"G√©n√©ration de {NUM_RECORDS} enregistrements...")
    
    # G√©n√©rer tous les enregistrements
    records = []
    for i in range(NUM_RECORDS):
        records.append(generate_record())
        if (i + 1) % 10 == 0:
            print(f"G√©n√©r√© {i + 1}/{NUM_RECORDS} enregistrements...")
    
    # Cr√©er le DataFrame
    df = pd.DataFrame(records)
    
    # Sauvegarder en CSV
    df.to_csv(OUTPUT_FILE, index=False)
    
    print(f"‚úÖ Fichier g√©n√©r√© : {OUTPUT_FILE}")
    print(f"üìä Statistiques :")
    print(f"   - Nombre d'enregistrements : {len(df)}")
    print(f"   - Nombre de c√©dantes uniques : {df['cedent_name'].nunique()}")
    print(f"   - Nombre d'airlines uniques : {df['insured_name'].nunique()}")
    print(f"   - Polices exclues : {len(df[df['exclusion_status'] == 'excluded'])}")
    print(f"   - Polices incluses : {len(df[df['exclusion_status'] == 'included'])}")
    
    # Afficher un √©chantillon
    print(f"\nüìã √âchantillon des donn√©es :")
    print(df.head().to_string(index=False))

if __name__ == "__main__":
    main()
