#!/usr/bin/env python3
"""
Test script pour v√©rifier le nouveau backend CSV folder des programmes.
"""

from pathlib import Path
from src.managers import ProgramManager
from src.io import CsvProgramFolderIO


def test_csv_folder_backend():
    """Test du backend CSV folder pour les programmes."""

    print("üß™ Test du backend CSV folder pour les programmes")
    print("=" * 60)

    # 1. Test de d√©tection automatique
    print("\n1. Test de d√©tection automatique du backend:")

    # Test avec un fichier Excel
    excel_backend = ProgramManager.detect_backend(
        "examples/programs/single_quota_share.xlsx"
    )
    print(f"   Excel file -> {excel_backend}")

    # Test avec un dossier (m√™me s'il n'existe pas encore)
    csv_backend = ProgramManager.detect_backend("test_csv_program")
    print(f"   CSV folder -> {csv_backend}")

    # Test avec Snowflake
    snowflake_backend = ProgramManager.detect_backend("snowflake://db.schema.table")
    print(f"   Snowflake -> {snowflake_backend}")

    # 2. Test de cr√©ation du manager avec le bon backend
    print("\n2. Test de cr√©ation du manager:")
    try:
        manager = ProgramManager(backend="csv_folder")
        print("   ‚úì Manager cr√©√© avec backend csv_folder")
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return

    # 3. Test de lecture d'un programme Excel existant et conversion vers CSV
    print("\n3. Test de conversion Excel -> CSV folder:")
    try:
        # Charger un programme Excel existant
        excel_manager = ProgramManager(backend="excel")
        program = excel_manager.load("examples/programs/single_quota_share.xlsx")
        print(f"   ‚úì Programme Excel charg√©: {program.name}")

        # Sauvegarder en CSV folder
        csv_manager = ProgramManager(backend="csv_folder")
        csv_manager.save(program, "test_csv_program")
        print("   ‚úì Programme sauvegard√© en CSV folder")

        # V√©rifier que les fichiers CSV ont √©t√© cr√©√©s
        csv_folder = Path("test_csv_program")
        expected_files = ["program.csv", "structures.csv", "conditions.csv"]
        for file in expected_files:
            if (csv_folder / file).exists():
                print(f"   ‚úì {file} cr√©√©")
            else:
                print(f"   ‚ùå {file} manquant")

    except Exception as e:
        print(f"   ‚ùå Erreur lors de la conversion: {e}")
        return

    # 4. Test de relecture du programme depuis le CSV folder
    print("\n4. Test de relecture depuis CSV folder:")
    try:
        reloaded_program = csv_manager.load("test_csv_program")
        print(f"   ‚úì Programme recharg√©: {reloaded_program.name}")
        print(f"   ‚úì Nombre de structures: {len(reloaded_program.structures)}")
        conditions_count = len(getattr(reloaded_program, "conditions", []))
        print(f"   ‚úì Nombre de conditions: {conditions_count}")

        # V√©rifier que les donn√©es sont identiques
        if program.name == reloaded_program.name:
            print("   ‚úì Nom du programme identique")
        else:
            print(f"   ‚ùå Noms diff√©rents: {program.name} vs {reloaded_program.name}")

    except Exception as e:
        print(f"   ‚ùå Erreur lors de la relecture: {e}")
        return

    # 5. Test de l'auto-d√©tection avec le dossier CSV
    print("\n5. Test de l'auto-d√©tection avec le dossier CSV:")
    try:
        auto_backend = ProgramManager.detect_backend("test_csv_program")
        print(f"   ‚úì Backend auto-d√©tect√©: {auto_backend}")

        auto_manager = ProgramManager(backend=auto_backend)
        auto_program = auto_manager.load("test_csv_program")
        print(f"   ‚úì Programme charg√© avec auto-d√©tection: {auto_program.name}")

    except Exception as e:
        print(f"   ‚ùå Erreur avec auto-d√©tection: {e}")
        return

    print("\n" + "=" * 60)
    print("‚úÖ Tous les tests du backend CSV folder ont r√©ussi !")
    print("=" * 60)


if __name__ == "__main__":
    test_csv_folder_backend()
