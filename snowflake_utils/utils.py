"""
Utilitaires Snowflake pour la sauvegarde et la gestion des programmes.

Ce module fournit des fonctions utilitaires simplifi√©es pour travailler
avec Snowflake dans le contexte de l'application.
"""

import os
from pathlib import Path
from typing import Dict, Any, Optional, Tuple

from .config import SnowflakeConfig


def get_save_config(
    backend: str, program_name: str, output_dir: str = "../programs"
) -> Tuple[str, Optional[Dict[str, Any]]]:
    """
    Retourne la configuration de sauvegarde selon le backend choisi.

    Args:
        backend: "csv_folder" ou "snowflake"
        program_name: Nom du programme (pour Snowflake)
        output_dir: Dossier de sortie pour CSV (par d√©faut "../programs")

    Returns:
        Tuple: (output_path, io_kwargs)

    Raises:
        ValueError: Si le backend n'est pas support√©
    """
    if backend == "csv_folder":
        os.makedirs(output_dir, exist_ok=True)
        output_path = f"{output_dir}/{program_name.lower()}"
        io_kwargs = None
        return output_path, io_kwargs

    elif backend == "snowflake":
        config = SnowflakeConfig.load()
        output_path = config.get_dsn(program_name)
        io_kwargs = {"connection_params": config.to_dict()}
        return output_path, io_kwargs

    else:
        raise ValueError(
            f"Backend non support√©: {backend}. Utilisez 'csv_folder' ou 'snowflake'"
        )


def save_program(
    program, backend: str, program_name: str, output_dir: str = "../programs"
) -> str:
    """
    Sauvegarde un programme avec la configuration appropri√©e.

    Args:
        program: Objet Program √† sauvegarder
        backend: "snowflake" ou "csv_folder"
        program_name: Nom du programme
        output_dir: Dossier de sortie pour CSV (par d√©faut "../programs")

    Returns:
        str: Chemin de destination utilis√© pour la sauvegarde

    Raises:
        ValueError: Si le backend n'est pas support√©
        RuntimeError: Si la sauvegarde √©choue
    """
    from src.managers import ProgramManager

    output_path, io_kwargs = get_save_config(backend, program_name, output_dir)

    print(f"üíæ Sauvegarde du programme '{program_name}'...")
    print(f"   Backend: {backend}")
    print(f"   Destination: {output_path}")

    try:
        manager = ProgramManager(backend=backend)
        manager.save(program, output_path, io_kwargs=io_kwargs)

        print(f"‚úÖ Programme '{program_name}' sauvegard√© avec succ√®s !")
        return output_path

    except Exception as e:
        print(f"‚ùå Erreur lors de la sauvegarde: {e}")
        raise RuntimeError(f"√âchec de la sauvegarde du programme '{program_name}': {e}")


def test_connection() -> bool:
    """
    Teste la connexion √† Snowflake.

    Returns:
        True si la connexion r√©ussit, False sinon
    """
    try:
        import snowflake.connector

        config = SnowflakeConfig.load()
        if not config.validate():
            print("‚ùå Configuration Snowflake invalide")
            return False

        print(f"üîó Test de connexion √† Snowflake: {config.account}")

        cnx = snowflake.connector.connect(**config.to_dict())
        cur = cnx.cursor()

        # Test simple
        cur.execute("SELECT CURRENT_VERSION()")
        version = cur.fetchone()[0]

        cur.close()
        cnx.close()

        print(f"‚úÖ Connexion r√©ussie ! Version Snowflake: {version}")
        return True

    except Exception as e:
        print(f"‚ùå √âchec de la connexion: {e}")
        return False


def list_programs() -> list:
    """
    Liste tous les programmes dans Snowflake.

    Returns:
        Liste des programmes avec leurs informations
    """
    try:
        import snowflake.connector

        config = SnowflakeConfig.load()
        cnx = snowflake.connector.connect(**config.to_dict())
        cur = cnx.cursor()

        cur.execute(
            f"""
            SELECT REINSURANCE_PROGRAM_ID, TITLE, CREATED_AT, UPDATED_AT 
            FROM "{config.database}"."{config.schema}"."REINSURANCE_PROGRAM" 
            ORDER BY CREATED_AT DESC
        """
        )

        programs = cur.fetchall()

        cur.close()
        cnx.close()

        return [
            {
                "id": prog[0],
                "title": prog[1],
                "created_at": prog[2],
                "updated_at": prog[3],
            }
            for prog in programs
        ]

    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des programmes: {e}")
        return []


def delete_program(program_title: str) -> bool:
    """
    Supprime un programme et toutes ses donn√©es li√©es.

    Args:
        program_title: Titre du programme √† supprimer

    Returns:
        True si la suppression r√©ussit, False sinon
    """
    try:
        import snowflake.connector

        config = SnowflakeConfig.load()
        cnx = snowflake.connector.connect(**config.to_dict())
        cur = cnx.cursor()

        # R√©cup√©rer l'ID du programme
        cur.execute(
            f"""
            SELECT REINSURANCE_PROGRAM_ID FROM "{config.database}"."{config.schema}"."REINSURANCE_PROGRAM" 
            WHERE TITLE = %s
        """,
            (program_title,),
        )

        result = cur.fetchone()
        if not result:
            print(f"‚ùå Programme '{program_title}' non trouv√©")
            return False

        program_id = result[0]

        # Supprimer les donn√©es li√©es
        cur.execute(
            f'DELETE FROM "{config.database}"."{config.schema}"."RP_GLOBAL_EXCLUSION" WHERE RP_ID = %s',
            (program_id,),
        )
        cur.execute(
            f'DELETE FROM "{config.database}"."{config.schema}"."RP_CONDITIONS" WHERE PROGRAM_ID = %s',
            (program_id,),
        )
        cur.execute(
            f'DELETE FROM "{config.database}"."{config.schema}"."RP_STRUCTURES" WHERE PROGRAM_ID = %s',
            (program_id,),
        )
        cur.execute(
            f'DELETE FROM "{config.database}"."{config.schema}"."REINSURANCE_PROGRAM" WHERE REINSURANCE_PROGRAM_ID = %s',
            (program_id,),
        )

        cnx.commit()
        cur.close()
        cnx.close()

        print(f"‚úÖ Programme '{program_title}' supprim√© avec succ√®s")
        return True

    except Exception as e:
        print(f"‚ùå Erreur lors de la suppression: {e}")
        return False


def reset_all_tables() -> bool:
    """
    Supprime et recr√©e toutes les tables Snowflake.

    Cette fonction effectue un reset complet :
    - Supprime toutes les tables existantes
    - Recr√©e les tables avec la structure correcte (auto-increment)
    - Cr√©e les index pour les performances

    Returns:
        True si le reset r√©ussit, False sinon
    """
    try:
        import snowflake.connector
        from pathlib import Path

        config = SnowflakeConfig.load()
        db = config.database
        schema = config.schema

        print("üóëÔ∏è  Reset complet des tables Snowflake")
        print(f"üîó Connexion √† Snowflake: {config.account}")
        print(f"üìä Base: {db}.{schema}")

        cnx = snowflake.connector.connect(**config.to_dict())
        cur = cnx.cursor()

        # 1. Supprimer toutes les tables existantes
        print("\nüóëÔ∏è  Suppression des tables existantes...")
        tables = [
            "RP_GLOBAL_EXCLUSION",
            "RP_CONDITIONS",
            "RP_STRUCTURES",
            "REINSURANCE_PROGRAM",
        ]

        for table in tables:
            try:
                cur.execute(f'DROP TABLE IF EXISTS "{db}"."{schema}"."{table}"')
                print(f"   ‚úÖ Table {table} supprim√©e")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Erreur suppression {table}: {e}")

        # 2. Recr√©er les tables avec la nouvelle structure (auto-increment)
        print("\nüèóÔ∏è  Cr√©ation des nouvelles tables...")

        # Lire le DDL corrig√©
        ddl_file = (
            Path(__file__).parent.parent / "scripts" / "correct_snowflake_ddl.sql"
        )
        with open(ddl_file, "r") as f:
            ddl_content = f.read()

        # Diviser le DDL en instructions individuelles
        statements = [stmt.strip() for stmt in ddl_content.split(";") if stmt.strip()]

        for statement in statements:
            if statement:
                # Remplacer les noms de tables par les noms qualifi√©s
                statement = statement.replace(
                    "CREATE TABLE REINSURANCE_PROGRAM",
                    f'CREATE TABLE "{db}"."{schema}"."REINSURANCE_PROGRAM"',
                )
                statement = statement.replace(
                    "CREATE TABLE RP_STRUCTURES",
                    f'CREATE TABLE "{db}"."{schema}"."RP_STRUCTURES"',
                )
                statement = statement.replace(
                    "CREATE TABLE RP_CONDITIONS",
                    f'CREATE TABLE "{db}"."{schema}"."RP_CONDITIONS"',
                )
                statement = statement.replace(
                    "CREATE TABLE RP_GLOBAL_EXCLUSION",
                    f'CREATE TABLE "{db}"."{schema}"."RP_GLOBAL_EXCLUSION"',
                )

                cur.execute(statement)

        print("   ‚úÖ Toutes les tables cr√©√©es avec le DDL corrig√© (auto-increment)")

        # 3. Cr√©er des index pour les performances
        print("\nüìä Cr√©ation des index...")

        indexes = [
            f'CREATE INDEX IDX_REINSURANCE_PROGRAM_TITLE ON "{db}"."{schema}"."REINSURANCE_PROGRAM"(TITLE)',
            f'CREATE INDEX IDX_RP_STRUCTURES_PROGRAM_ID ON "{db}"."{schema}"."RP_STRUCTURES"(PROGRAM_ID)',
            f'CREATE INDEX IDX_RP_CONDITIONS_PROGRAM_ID ON "{db}"."{schema}"."RP_CONDITIONS"(PROGRAM_ID)',
            f'CREATE INDEX IDX_RP_GLOBAL_EXCLUSION_RP_ID ON "{db}"."{schema}"."RP_GLOBAL_EXCLUSION"(RP_ID)',
        ]

        for index_sql in indexes:
            try:
                cur.execute(index_sql)
                print(f"   ‚úÖ Index cr√©√©")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Erreur cr√©ation index: {e}")

        cnx.commit()
        cur.close()
        cnx.close()

        print("\n‚úÖ Reset complet termin√© avec succ√®s !")
        print(
            "üí° Les nouveaux programmes auront maintenant des IDs uniques automatiques."
        )
        return True

    except Exception as e:
        print(f"‚ùå Erreur lors du reset: {e}")
        return False


def truncate_all_tables() -> bool:
    """
    Vide toutes les tables Snowflake (supprime les donn√©es mais garde les tables).

    Returns:
        True si le truncate r√©ussit, False sinon
    """
    try:
        import snowflake.connector

        config = SnowflakeConfig.load()
        db = config.database
        schema = config.schema

        print("üóëÔ∏è  Vidage de toutes les tables Snowflake")
        print(f"üîó Connexion √† Snowflake: {config.account}")
        print(f"üìä Base: {db}.{schema}")

        cnx = snowflake.connector.connect(**config.to_dict())
        cur = cnx.cursor()

        # Ordre de suppression (respecter les contraintes de cl√©s √©trang√®res)
        tables = [
            "RP_GLOBAL_EXCLUSION",
            "RP_CONDITIONS",
            "RP_STRUCTURES",
            "REINSURANCE_PROGRAM",
        ]

        for table in tables:
            try:
                cur.execute(f'TRUNCATE TABLE "{db}"."{schema}"."{table}"')
                print(f"   ‚úÖ Table {table} vid√©e")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Erreur vidage {table}: {e}")

        cnx.commit()
        cur.close()
        cnx.close()

        print("\n‚úÖ Toutes les tables ont √©t√© vid√©es avec succ√®s !")
        return True

    except Exception as e:
        print(f"‚ùå Erreur lors du vidage: {e}")
        return False
