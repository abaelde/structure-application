"""
Proc√©dure Snowpark pour l'√©criture d'un programme de r√©assurance.

Ce module contient une fonction utilitaire simple qui utilise
l'adapter Snowpark existant pour √©crire un programme.
"""

from typing import Dict, Any
import pandas as pd
from snowflake.snowpark import Session


def write_program_simple(
    session: Session,
    program_df: pd.DataFrame,
    structures_df: pd.DataFrame,
    conditions_df: pd.DataFrame,
    exclusions_df: pd.DataFrame,
    field_links_df: pd.DataFrame,
) -> Dict[str, Any]:
    """
    √âcrit un programme complet dans Snowflake en utilisant l'adapter Snowpark.
    
    Cette fonction utilise simplement l'adapter SnowparkProgramIO existant
    pour √©crire le programme, sans red√©finir toute la logique.
    
    Args:
        session: Session Snowpark active
        program_df: DataFrame du programme principal
        structures_df: DataFrame des structures
        conditions_df: DataFrame des conditions
        exclusions_df: DataFrame des exclusions
        field_links_df: DataFrame des field links (overrides)
        
    Returns:
        Dictionnaire contenant le r√©sultat de l'op√©ration :
        - success: bool - Indique si l'op√©ration a r√©ussi
        - program_id: int - ID du programme cr√©√© (si succ√®s)
        - metadata: dict - M√©tadonn√©es de l'op√©ration
        - error: str - Message d'erreur (si √©chec)
    """
    try:
        print("üöÄ D√©but de l'√©criture du programme via Snowpark...")
        
        # Utiliser l'adapter Snowpark existant
        from src.io.program_snowpark_adapter import SnowparkProgramIO
        
        # Cr√©er l'adapter avec la session
        adapter = SnowparkProgramIO(session)
        
        # Cr√©er une DSN de destination (on utilise la base/schema de la session)
        dest_dsn = "snowflake://database.schema"  # L'adapter n'utilise pas vraiment cette DSN
        
        # Appeler la m√©thode write de l'adapter
        adapter.write(
            dest=dest_dsn,
            program_df=program_df,
            structures_df=structures_df,
            conditions_df=conditions_df,
            exclusions_df=exclusions_df,
            field_links_df=field_links_df,
            connection_params={},  # Non utilis√© avec Snowpark
        )
        
        print("üéâ √âcriture du programme termin√©e avec succ√®s !")
        return {
            "success": True,
            "program_id": None,  # L'adapter ne retourne pas l'ID pour l'instant
            "metadata": {
                "structures_count": len(structures_df),
                "conditions_count": len(conditions_df),
                "field_links_count": len(field_links_df),
                "exclusions_count": len(exclusions_df),
            },
        }
        
    except Exception as e:
        error_msg = f"Erreur lors de l'√©criture du programme: {str(e)}"
        print(f"‚ùå {error_msg}")
        import traceback
        print(f"D√©tails de l'erreur: {traceback.format_exc()}")
        return {"success": False, "error": error_msg}
