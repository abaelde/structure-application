"""
Program Manager utilisant Snowpark.

Ce manager utilise Snowpark pour charger les programmes depuis Snowflake
et les convertir en objets Program en m√©moire via le ProgramSerializer.
"""

from __future__ import annotations
from typing import Optional
from snowflake.snowpark import Session

from .program_manager import ProgramManager
from src.io.program_snowpark_adapter import SnowparkProgramIO
from src.serialization.program_serializer import ProgramSerializer
from src.domain.program import Program


class SnowparkProgramManager:
    """
    Program Manager utilisant Snowpark pour la lecture des programmes.
    
    Ce manager charge les programmes depuis Snowflake en utilisant Snowpark
    et les convertit en objets Program en m√©moire via le ProgramSerializer.
    """
    
    def __init__(self, session: Session):
        """
        Initialise le manager avec une session Snowpark.
        
        Args:
            session: Session Snowpark active
        """
        self.session = session
        self.serializer = ProgramSerializer()
        self.io = SnowparkProgramIO(session)
        self._loaded_program: Optional[Program] = None
        self._loaded_program_id: Optional[int] = None

    def load(self, program_id: int) -> Program:
        """
        Charge un programme depuis Snowflake en utilisant Snowpark.
        
        Args:
            program_id: ID du programme √† charger
            
        Returns:
            Objet Program charg√© en m√©moire
            
        Raises:
            RuntimeError: Si le chargement √©choue
        """
        try:
            # Lire les DataFrames depuis Snowflake via Snowpark
            program_df, structures_df, conditions_df, exclusions_df, field_links_df = self.io.read(program_id)
            
            # Convertir les DataFrames en objet Program via le serializer
            program = self.serializer.dataframes_to_program(
                program_df, structures_df, conditions_df, exclusions_df, field_links_df
            )
            
            # Sauvegarder l'√©tat
            self._loaded_program = program
            self._loaded_program_id = program_id
            
            return program
            
        except Exception as e:
            raise RuntimeError(f"Failed to load program {program_id} via Snowpark: {e}")

    def save(self, program: Program, io_kwargs: Optional[dict] = None) -> None:
        """
        Sauvegarde un programme via Snowpark.
        
        Cette m√©thode s√©rialise le programme en DataFrames et l'√©crit dans Snowflake
        en utilisant Snowpark. La session Snowpark est d√©j√† configur√©e avec la base
        de donn√©es et le sch√©ma, donc aucun param√®tre de destination n'est n√©cessaire.
        
        Args:
            program: Programme √† sauvegarder
            io_kwargs: Param√®tres suppl√©mentaires (non utilis√©s avec Snowpark)
            
        Raises:
            RuntimeError: Si la sauvegarde √©choue
        """
        try:
            print(f"üíæ Sauvegarde du programme '{program.name}' via Snowpark...")
            
            # S√©rialiser le programme en DataFrames (m√™me logique que l'ancien syst√®me)
            program_dataframes = self.serializer.program_to_dataframes(program)
            
            program_df = program_dataframes['program']
            structures_df = program_dataframes['structures']
            conditions_df = program_dataframes['conditions']
            exclusions_df = program_dataframes['exclusions']
            field_links_df = program_dataframes['field_links']
            
            print(f"‚úÖ Programme s√©rialis√©:")
            print(f"   - Programme: {len(program_df)} ligne(s)")
            print(f"   - Structures: {len(structures_df)} ligne(s)")
            print(f"   - Conditions: {len(conditions_df)} ligne(s)")
            print(f"   - Exclusions: {len(exclusions_df)} ligne(s)")
            print(f"   - Field Links: {len(field_links_df)} ligne(s)")
            
            # √âcrire via l'adapter Snowpark
            self.io.write(
                program_df=program_df,
                structures_df=structures_df,
                conditions_df=conditions_df,
                exclusions_df=exclusions_df,
                field_links_df=field_links_df,
                connection_params={},  # Non utilis√© avec Snowpark
            )
            
            print(f"üéâ Programme '{program.name}' sauvegard√© avec succ√®s via Snowpark !")
            
        except Exception as e:
            error_msg = f"Failed to save program '{program.name}' via Snowpark: {str(e)}"
            print(f"‚ùå {error_msg}")
            raise RuntimeError(error_msg) from e


    def get_loaded_program(self) -> Optional[Program]:
        """
        Retourne le programme actuellement charg√©.
        
        Returns:
            Programme charg√© ou None
        """
        return self._loaded_program

    def get_loaded_program_id(self) -> Optional[int]:
        """
        Retourne l'ID du programme actuellement charg√©.
        
        Returns:
            ID du programme ou None
        """
        return self._loaded_program_id
